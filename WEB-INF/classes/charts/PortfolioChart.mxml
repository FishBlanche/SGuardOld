<?xml version="1.0" encoding="utf-8"?>
<!-- Christophe Coenraets, http://coenraets.org -->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:charts="charts.*"
		 xmlns:controls="mx.controls.*"
		 width="100%" height="100%" clipAndEnableScrolling="true"
		 creationComplete="completeHandler()"
		 
		 resize="redraw()">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.events.MenuEvent;
			import mx.messaging.ChannelSet;
			import mx.messaging.channels.AMFChannel;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			import mx.utils.ColorUtil;
			
			import spark.effects.Move;
			import spark.primitives.supportClasses.FilledElement;
			
			import charts.JackAxisArrayList;
			
			import components.SensingDataFormat;
			import components.SensorKind;
			
			import model.SensingEntry;
			
			private var myAMF:AMFChannel=new AMFChannel();
			private var channelSet:ChannelSet=new ChannelSet();
			private var ro:RemoteObject = new RemoteObject();
			public var _data:Array;
			protected var min:Number;
			[Bindable]
			protected var max:Number;
			[Bindable]
			public var srollerwidth:Number;
			[Bindable]
			public var firstDate:Date;
			[Bindable]
			public var lastDate:Date;
			[Bindable]
			public var widthdays:Number; 
			[Bindable]
			public var zoomdata:int=5;
			
			[Bindable]
			public var itemSelected:Number=0;
			
			
			public var scalex:Number = 1;
			
			
			public function set data(data:Array):void
			{
				_data = data;
				this.datahandler();
			}
			
			public function get data():Array
			{
				return _data;
			}
			
			public function datahandler():void
			{
	
				//var tmp = data[0];
				if(data.length <= 0){
					return;
				}
				firstDate = data[0].timestampArrive_TM as Date;
				lastDate = _data[data.length - 1].timestampArrive_TM as Date;
				var tmpA:Array = new Array;
				if(itemSelected==0)
				{//-------------humidity
					
					min = data[i].humidity;
					max = data[i].humidity;
					for (var i:int=1; i<data.length; i++)
					{
						//tmp = _data[i];
						if (_data[i].humidity<min) min = _data[i].humidity;
						if (_data[i].humidity>max) max = _data[i].humidity;					
						tmpA.push(_data[i].timestampArrive_TM as Date);
					
					}
					chartName.text="Humidity";
				}
					
				else if(itemSelected==1){	//--------------temperature
					
					min = data[0].temperature;
					max = data[0].temperature;
					for (i=1; i<data.length; i++)
					{
						//tmp = data[i];
						if ( data[i].temperature<min) min =  data[i].temperature;
						if ( data[i].temperature>max) max =  data[i].temperature;					
						tmpA.push( data[i].timestampArrive_TM as Date);
					}
					chartName.text="Temperature";
				}
				else if(itemSelected==2){//--------------light
					
					min = data[0].light;
					max = data[0].light;
					for ( i=1; i<data.length; i++)
					{
						//tmp = data[i];
						if (data[i].light<min) min = data[i].light;
						if (data[i].light>max) max = data[i].light;					
						tmpA.push(data[i].timestampArrive_TM as Date);
					}
					chartName.text="Light";
				}else if(itemSelected==3){//--------------co2
					
					min = data[0].co2;
					max = data[0].co2;
					for ( i=1; i<data.length; i++)
					{
						//tmp = data[i];
						if (data[i].co2<min) min = data[i].co2;
						if (data[i].co2>max) max = data[i].co2;					
						tmpA.push(data[i].timestampArrive_TM as Date);
					}
					
					switch(data[i-1].type)
					{
						case 1:
							chartName.text="CO";
							break;
						case 2:
							chartName.text="CO2";
							break;
						case 3:
							chartName.text="SO2";
							break;
						case 4:
							chartName.text="NO2";
							break;
						case 5:
							chartName.text="H2S";
							break;
						case 6:
							chartName.text="CH4";
							break;
						case 7:
							chartName.text="DUST";
							break;
						default:
							chartName.text="其他";
							break;
					}
					
				}
				else if(itemSelected==4){//--------------mag
					
					min = data[0].co2;
					max = data[0].co2;
					for ( i=1; i<data.length; i++)
					{
						data[i] = data[i];
						if (data[i].co2<min) min = data[i].co2;
						if (data[i].co2>max) max = data[i].co2;					
						tmpA.push(data[i].timestampArrive_TM as Date);
					}
					chartName.text="Magnetic Field Strenth";
				}
				
				
				
				hAxisData.step = 20;
				hAxisData.allSource = tmpA;	
				path.width=1024*5;
				widthdays=path.width;
				redraw();
			}
			
			public function completeHandler():void
			{
				Multitouch.inputMode = MultitouchInputMode.GESTURE;
				rect.addEventListener(TransformGestureEvent.GESTURE_ZOOM, zoom);
				rect.addEventListener(MouseEvent.MOUSE_UP,fingerOut);
				myAMF.url=SensorKind.URL;
				channelSet.addChannel(myAMF); 
				ro.channelSet = channelSet;
				ro.destination = "SensingHistoryService";
				ro.addEventListener(ResultEvent.RESULT,remoteobject1_resultHandler);
				//ro.getFixedNumberMoteHistoryByMoteID({MoteID:FlexGlobals.topLevelApplication.selectedID,days:FlexGlobals.topLevelApplication.selectedDays});
				//redraw();
			}
			
			private function remoteobject1_resultHandler(event:ResultEvent):void
			{
				// TODO Auto-generated method stub
				var tmp:ArrayCollection  =(event.result as ArrayCollection);
				var takenum:int=Math.floor(tmp.length/1500);
				trace("tmp.length:"+tmp.length);
				trace("takenum:"+takenum);
				var removenum:int=0;
				if(takenum>1){
					for(var i:int=0;i<tmp.length;)
					{
						for(var j:int=1;j<takenum&&(i+1)<tmp.length;j++)
						{
							tmp.removeItemAt(i+1);
							removenum++;
						}
						i=i+1;
					}
					tmp.refresh();
				}
				
				trace("has remove num:"+removenum);
				data= tmp.toArray();
				
			}
			
			
			protected function zoom(e:TransformGestureEvent):void
			{ 
				var w:Number = path.width * e.scaleX;
				if (e.scaleX>1)
					path.width = w > width*15 ? width*15 : w;
				else
				{
					path.width = w < width ? width : w;
					if (path.x + path.width < width) path.x = width - path.width;
				}
				scalex*=e.scaleX;
			}
			protected function fingerOut(event:Event):void
			{
				
				if(scalex==1) return;
				widthdays=path.width;
				hAxisData.step=Math.round(widthdays/1024)*3;
				scalex=1;	
				redraw();
			}
			
			public function redraw():void
			{
				if (!data) return;
				var pathData:String = "M 0 " + rect.height;
				
				var xPos:Number;
				var yPos:Number;
				var tmpdata:Number;
				var alltime:Number = lastDate.time - firstDate.time;
				for (var i:int=0; i<data.length; i++)
				{
					//var tmp = ;
					if(itemSelected==0) tmpdata=data[i].humidity;
					else if(itemSelected==1) tmpdata=data[i].temperature;
					else if(itemSelected==2)tmpdata=data[i].light;
					else if(itemSelected==3)tmpdata=data[i].co2;
					else if(itemSelected==4)tmpdata=data[i].co2;
					
					yPos = rect.height - tmpdata/max * rect.height;
					xPos = (data[i].timestampArrive_TM.time - firstDate.time)/alltime * width;
					pathData += " L " + xPos + " " + yPos;
				}
				pathData += "L " + xPos + " " + rect.height + " z";
				path.data = pathData;
			}
		
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:CurrencyFormatter id="cf" useCurrencySymbol="true" currencySymbol="$" fractionalDigits="0"/>
		<s:DateTimeFormatter id="df" dateTimePattern="MM/dd HH:mm"/>
		<s:NumberFormatter fractionalDigits="2" id="nf">
		</s:NumberFormatter>
		<charts:JackAxisArrayList id="hAxisData"/>
	</fx:Declarations>
	
	<s:Line top="108" left="60" right="0">
		<s:stroke>
			<s:SolidColorStroke weight="1" color="#999999"/>
		</s:stroke>
	</s:Line>
	<s:Line  top="{rect.height/4*2+108}"  left="60" right="0">
		<s:stroke>
			<s:SolidColorStroke weight="1" color="#999999"/>
		</s:stroke>
	</s:Line>
	<s:Line top="{rect.height/4+108}" left="60" right="0">
		<s:stroke>
			<s:SolidColorStroke weight="1" color="#999999"/>
		</s:stroke>
	</s:Line>
	<s:Line top="{rect.height/4*3+108}" left="60" right="0">
		<s:stroke>
			<s:SolidColorStroke weight="1" color="#999999"/>
		</s:stroke>
	</s:Line>
	<s:Label top="80" id="chartName" text=""  paddingLeft="{width-width/3}" color="#BD780F"/>
	<s:Label top="100" left="4" text="{nf.format(max)}" fontSize="12"/>
	<s:Label top="{rect.height/4+100}" left="4" text="{nf.format(max/4*3)}" fontSize="12"/>
	<s:Label top="{rect.height/4*3+100}" left="4" text="{nf.format(max/4)}" fontSize="12"/>
	<s:Label  top="{rect.height/4*2+100}"  left="4" text="{nf.format(max/2)}" fontSize="12"/>
	
	<s:Scroller id="scroller" top="108" bottom="0" left="0" right="0">
		
		<s:Group id="rect" top="100" bottom="0" left="0" right="0">
			
			<s:DataGroup dataProvider="{hAxisData}" top="0" bottom="0" left="0" right="0"
						 >
				<s:itemRenderer>
					<fx:Component>
						<s:DataRenderer height="{outerDocument.rect.height}"
										width="{outerDocument.widthdays/outerDocument.hAxisData.length}"
										>
							<s:Label  left="0" textAlign="center"  text="{outerDocument.df.format(data) }"  bottom="4" fontSize="16"/>
							<s:Line  left="0" top="0" bottom="24">
								<s:stroke>
									<s:SolidColorStroke color="#999999" weight="1" />
								</s:stroke>
							</s:Line>
						</s:DataRenderer>
					</fx:Component>
				</s:itemRenderer>
				<s:layout>
					<s:HorizontalLayout gap="-1"/>
				</s:layout>
			</s:DataGroup>
			
			<s:Path id="path"  width="{width*5}"  height="100%">				
				<s:stroke>
					<s:SolidColorStroke  color="#00719b" weight="1"/>
				</s:stroke>
				<s:fill>
					<s:LinearGradient rotation="90">
						<s:GradientEntry  color="#00BAFF" ratio="0" alpha=".5"/>                
						<s:GradientEntry color="#00719b" ratio="1" alpha=".5"/>
					</s:LinearGradient>
				</s:fill>
				
			</s:Path>
			
		</s:Group>
		
	</s:Scroller>
	
</s:Group>